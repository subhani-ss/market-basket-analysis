# market_basket_analysis.py


import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules
import matplotlib.pyplot as plt

# Step 1: Load the dataset
def load_data():
    # Sample transactional data (can be replaced with real CSV)
    dataset = [
        ['milk', 'bread', 'nuts', 'apple'],
        ['milk', 'bread', 'nuts'],
        ['milk', 'bread'],
        ['milk', 'bread', 'apple'],
        ['milk', 'bread', 'apple']
    ]
    return dataset

# Step 2: Preprocess data using TransactionEncoder
def preprocess_data(dataset):
    te = TransactionEncoder()
    te_array = te.fit(dataset).transform(dataset)
    df = pd.DataFrame(te_array, columns=te.columns_)
    return df

# Step 3: Apply Apriori algorithm
def apply_apriori(df, min_support=0.6):
    frequent_itemsets = apriori(df, min_support=min_support, use_colnames=True)
    return frequent_itemsets

# Step 4: Generate association rules
def generate_rules(frequent_itemsets, min_confidence=0.7):
    rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=min_confidence)
    return rules

# Step 5: Plot top frequent items
def plot_frequent_items(frequent_itemsets):
    frequent_itemsets = frequent_itemsets.sort_values(by='support', ascending=False).head(10)
    plt.figure(figsize=(10, 6))
    plt.bar(frequent_itemsets['itemsets'].astype(str), frequent_itemsets['support'], color='skyblue')
    plt.xticks(rotation=45)
    plt.title('Top Frequent Itemsets')
    plt.xlabel('Itemsets')
    plt.ylabel('Support')
    plt.tight_layout()
    plt.show()

# Main function to run all steps
def main():
    dataset = load_data()
    df = preprocess_data(dataset)
    frequent_itemsets = apply_apriori(df)
    rules = generate_rules(frequent_itemsets)

    print("\n--- Frequent Itemsets ---")
    print(frequent_itemsets)
    print("\n--- Association Rules ---")
    print(rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])
    
    plot_frequent_items(frequent_itemsets)

if __name__ == "__main__":
    main()
